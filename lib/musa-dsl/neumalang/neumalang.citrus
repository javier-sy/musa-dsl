grammar Musa::Neumalang::Neumalang::Parser::Grammar::Grammar
    include Musa::Neumalang::Neumalang::Parser::Grammar::Terminals
    include Musa::Neumalang::Neumalang::Parser::Grammar::Datatypes
    include Musa::Neumalang::Neumalang::Parser::Grammar::Neuma
    include Musa::Neumalang::Neumalang::Parser::Grammar::Vectors
    include Musa::Neumalang::Neumalang::Parser::Grammar::Process

	rule sentences
		(optional_separation (expression optional_separation)*) <Musa::Neumalang::Neumalang::Parser::Sentences>
	end

	rule expression
		(variable_assign | call_methods_expression | object_expression | event)
	end

	rule object_expression
		braced_command |
        reference_expression |
        bracketed_expression |
        use_variable |
        constant |
        neuma_between_parenthesis |
        appogiatura_neuma_between_parenthesis |
        process |
        packed_vector |
        vector
	end

	rule reference_expression
		(ampersand optional_separation expression) <Musa::Neumalang::Neumalang::Parser::ReferenceExpression>
	end

	rule variable_assign
		((use_variable optional_separation equal optional_separation)+ expression) <Musa::Neumalang::Neumalang::Parser::VariableAssign>
	end

	rule event
		(double_colon name parameters?) <Musa::Neumalang::Neumalang::Parser::Event>
	end

	rule braced_command
		(lbrace optional_separation complex_command optional_separation rbrace parameters?) <Musa::Neumalang::Neumalang::Parser::BracedCommand>
	end

	rule call_methods_expression
		(object_expression (dot method_call)+) <Musa::Neumalang::Neumalang::Parser::CallMethodsExpression>
	end

	rule bracketed_expression
		bracketed_bar_sentences | bracketed_sentences
	end

	rule method_call
		(name parameters?) { { method: capture(:name).value.to_sym }.merge(capture(:parameters) ? capture(:parameters).value : {}) }
	end

	rule bracketed_bar_sentences
		(lbracket aa:sentences (double_bar bb:sentences)+ rbracket) <Musa::Neumalang::Neumalang::Parser::BracketedBarSentences>
	end

	rule bracketed_sentences
		(lbracket sentences rbracket) <Musa::Neumalang::Neumalang::Parser::BracketedSentences>
	end

	rule use_variable
		(at name) <Musa::Neumalang::Neumalang::Parser::UseVariable>
	end

	rule parameters
	    (lpar parameter (comma parameter)* optional_separation rpar) <Musa::Neumalang::Neumalang::Parser::Parameters>
	end

    rule parameter
        (optional_separation (key_value_parameter | expression)) <Musa::Neumalang::Neumalang::Parser::Parameter>
    end

	rule key_value_parameter
		(name colon optional_separation expression) { { capture(:name).value.to_sym => capture(:expression).value } }
	end

	rule complex_command
	    (everything_except_braces? lbrace optional_separation complex_command optional_separation rbrace)* everything_except_braces?
	end
end
