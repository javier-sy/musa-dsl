grammar Neumalang

	rule content
		sentences
	end

	rule sentences
		(spaces (sentence spaces)*) <Musa::Neumalang::Sentences>
	end

	rule sentence
		expression
	end

	rule expression
		variable_assign | call_methods_expression | object_expression | event
	end

	rule object_expression
		braced_command | reference_expression | parenthesis_expression | bracketed_expression | use_variable | constant | neuma
	end

	rule parenthesis_expression
		(lpar expression rpar) { capture(:expression).value }
	end

	rule reference_expression
		(ampersand spaces expression) { { kind: :reference, reference: capture(:expression).value } }
	end

	rule variable_assign
		((use_variable spaces equal spaces)+ expression) { { kind: :assign_to, assign_to: captures(:use_variable).collect { |c| c.value[:use_variable] }, assign_value: capture(:expression).value } }
	end

	rule event
		(double_colon name parameters?) { { kind: :event, event: capture(:name).value.to_sym }.merge(capture(:parameters) ? capture(:parameters).value : {}) } 
	end

	rule braced_command
		(lbrace spaces complex_command spaces rbrace parameters?) { { kind: :command, command: eval("proc { #{capture(:complex_command).value.strip} }") }.merge(capture(:parameters) ? capture(:parameters).value : {}) }
	end

	rule call_methods_expression
		(object_expression (dot method_call)+) { { kind: :call_methods, call_methods: captures(:method_call).collect { |c| c.value }, on: capture(:object_expression).value } }
	end

	rule bracketed_expression
		bracketed_2bar_sentences | bracketed_sentences
	end

	rule method_call
		(name parameters?) { { method: capture(:name).value.to_sym }.merge(capture(:parameters) ? capture(:parameters).value : {}) } 
	end

	rule neuma
		neuma_as_dotted_attributes_beginning_with_dot | neuma_as_dotted_attributes | neuma_between_angles_attributes
	end

	rule constant
		number | symbol | string
	end

	rule bracketed_2bar_sentences 
		(lbracket spaces aa:sentences (double_bar spaces bb:sentences)+ rbracket) <Musa::Neumalang::Bracketed_2bar_sentences>
	end

	rule bracketed_sentences
		(lbracket spaces sentences rbracket) <Musa::Neumalang::Bracketed_sentences>
	end

	rule use_variable
		(at name) { { kind: :use_variable, use_variable: "@#{capture(:name).value}".to_sym } }
	end

	rule parameters
		parameters_a | parameters_b | parameters_c
	end

	rule parameters_a
		(lpar positional_parameters comma key_parameters rpar) { { value_parameters: capture(:positional_parameters).value, key_parameters: capture(:key_parameters).value } }
	end

	rule parameters_b
		(lpar key_parameters rpar) { { key_parameters: capture(:key_parameters).value } }
	end

	rule parameters_c
		(lpar positional_parameters rpar) { { value_parameters: capture(:positional_parameters).value } }
	end

	rule positional_parameters
		(spaces a:sentence (spaces comma spaces b:sentence spaces)* spaces) { 
			[ capture(:a).value ] + captures(:b).collect { |c| c.value }
		}
	end

	rule key_parameters
		(spaces a:key_value_parameter (spaces comma spaces b:key_value_parameter spaces)* spaces) { 
			
			result = capture(:a).value.clone
			
			captures(:b).each { |c| result.merge! c.value }
			
			result
		}
	end

	rule key_value_parameter
		(key:name colon spaces value:sentence) { { capture(:key).value.to_sym => capture(:value).value } }
	end

	rule complex_command
		(everything_except_braces? lbrace spaces complex_command spaces rbrace)* everything_except_braces?
	end


	rule neuma_as_dotted_attributes_beginning_with_dot
		(dot neuma_as_dotted_attributes) { { kind: :neuma, neuma: [ nil ] + capture(:neuma_as_dotted_attributes).value[:neuma] } }
	end

	rule neuma_as_dotted_attributes
		 ((a:attribute (dot b:attribute?)*) | dot) { { kind: :neuma, neuma: (capture(:a) ? [ capture(:a).value ] : []) + captures(:b).collect { |c| c.value } } }
	end

	rule neuma_between_angles_attributes
		(langle spaces (attribute spaces)* rangle) { { kind: :neuma, neuma: captures(:attribute).collect { |c| c.value } } }
	end

	rule attribute
		everything_that_can_be_an_attribute !colon
	end

	rule number
    	float | integer
  	end

  	rule symbol
  		(colon name) { { kind: :value, value: capture(:name).value.to_sym } }
  	end

  	rule string
  		(double_quote everything_except_double_quote double_quote) { { kind: :value, value: capture(:everything_except_double_quote).value } }
  	end

  	rule float
    	(single_quote str:(digits dot digits) spaces) { { kind: :value, value: capture(:str).value.to_f } }
  	end

  	rule integer
    	(single_quote digits spaces) { { kind: :value, value: capture(:digits).value.to_i } }
  	end

	rule comment
		(lcomment complex_comment rcomment) | (hsh everything_until_eol)
	end

	rule complex_comment
		everything_except_comment? (lcomment complex_comment rcomment)* everything_except_comment?
	end

  	rule digits
    	[0-9]+ ('_' [0-9]+)*
  	end

	rule name
		/[[:alpha:]]\w*/
	end

	rule everything_that_can_be_an_attribute
		/[^({|}|\[|\]|\(|\)|\<|\>|.|,|:|=| |\t|\n|\r|\"|#|@|&|\|)]+/m
	end

	rule everything_until_eol
		~/$/
	end

	rule everything_except_comment
		~/((\*\/)|(\/\*))/m
	end

	rule everything_except_braces
		~/({|})/m
	end

	rule everything_except_double_quote
		~/(\")/m
	end

	rule double_quote '"' end
	rule single_quote '\'' end
	rule dot '.' end
	rule comma ',' end
	rule colon ':' end
	rule double_colon '::' end
	rule bar '|' end
	rule double_bar '||' end
	rule lpar '(' end
	rule rpar ')' end
	rule lbrace '{' end
	rule rbrace '}' end
	rule lbracket '[' end
	rule rbracket ']' end
	rule langle '<' end
	rule rangle '>' end
	rule at '@' end
	rule ampersand '&' end
	rule equal '=' end
	rule lcomment '/*' end
	rule rcomment '*/' end
	rule hsh '#' end

	rule space /[ \t\n\r]/m end
	rule spaces (space | comment)* end
end