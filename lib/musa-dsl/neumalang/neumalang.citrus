grammar Neumalang

	rule content
		sentences
	end

	rule sentences
		(spaces (sentence spaces)*) { captures(:sentence).collect { |c| c.value } }
	end

	rule sentence
 		direct_sentence | reference_sentence
	end

	rule reference_sentence
		(ampersand spaces direct_sentence) { capture(:direct_sentence).value.merge({ reference: true }) }
	end

	rule direct_sentence
		 command | expression
	end

	
	rule sentence_inside_parameter
		direct_sentence_inside_parameter | reference_sentence_inside_parameter
	end

	rule reference_sentence_inside_parameter
		(ampersand spaces direct_sentence_inside_parameter) { capture(:direct_sentence_inside_parameter).value.merge({ reference: true }) }
	end

	rule direct_sentence_inside_parameter
		 command_inside_parameter | expression_inside_parameter
	end


	rule command_inside_parameter
		variable_assign | braced_command # | referenced_braced_command
	end

	rule command
		variable_assign | event | braced_command
	end

	rule expression
		serie_expression | neuma
	end

	rule expression_inside_parameter
		serie_expression | constant | neuma_as_parenthesis_attributes
	end


	rule variable_assign
		((use_variable spaces equal spaces)+ expression) { { kind: :assign_to, assign_to: captures(:use_variable).collect { |c| c.value[:use_variable] }, assign_value: capture(:expression).value } }
	end

	rule event
		(double_colon name parameters?) { { kind: :event, event: capture(:name).value.to_sym }.merge(capture(:parameters) ? capture(:parameters).value : {}) } 
	end

	rule braced_command
		(lbrace spaces complex_command spaces rbrace) { { kind: :command, command: eval("proc { #{capture(:complex_command).value.strip} }") } }
	end

	#rule referenced_braced_command
	#	(ampersand spaces braced_command) { { kind: :reference_command, reference_command: capture(:braced_command).value[:command] } }
	#end



	rule serie_expression
		call_methods_expression | simple_expression
	end

	rule call_methods_expression
		(simple_expression (dot method_call)+) { { kind: :call_methods, call_methods: captures(:method_call).collect { |c| c.value }, on: capture(:simple_expression).value } }
	end

	rule simple_expression
		bracketed_2bar_sentences | bracketed_sentences | use_variable
	end



	rule method_call
		(name parameters?) { { method: capture(:name).value.to_sym }.merge(capture(:parameters) ? capture(:parameters).value : {}) } 
	end



	rule neuma
		neuma_as_dotted_attributes_beginning_with_dot | neuma_as_dotted_attributes | neuma_as_parenthesis_attributes
	end

	rule constant
		number | symbol | string
	end

	rule bracketed_2bar_sentences
		(lbracket spaces aa:sentences (double_bar spaces bb:sentences)+ rbracket) { { kind: :parallel, parallel: [ { kind: :serie, serie: capture(:aa).value } ] + captures(:bb).collect { |c| { kind: :serie, serie: c.value } } } }
	end

	rule bracketed_sentences
		(lbracket spaces sentences rbracket) { { kind: :serie, serie: capture(:sentences).value } }
	end

	rule use_variable
		(at name) { { kind: :use_variable, use_variable: "@#{capture(:name).value}".to_sym } }
	end



	rule parameters
		parameters_a | parameters_b | parameters_c
	end

	rule parameters_a
		(lpar positional_parameters comma key_parameters rpar) { { value_parameters: capture(:positional_parameters).value, key_parameters: capture(:key_parameters).value } }
	end

	rule parameters_b
		(lpar key_parameters rpar) { { key_parameters: capture(:key_parameters).value } }
	end

	rule parameters_c
		(lpar positional_parameters rpar) { { value_parameters: capture(:positional_parameters).value } }
	end

	rule positional_parameters
		(spaces a:sentence_inside_parameter (spaces comma spaces b:sentence_inside_parameter spaces)* spaces) { 
			[ capture(:a).value ] + captures(:b).collect { |c| c.value } 
		}
	end

	rule key_parameters
		(spaces a:key_value (spaces comma spaces b:key_value spaces)* spaces) { 
			
			result = capture(:a).value.clone
			
			captures(:b).each { |c| result.merge! c.value }
			
			result
		}
	end

	rule key_value
		(key:name colon spaces value:sentence_inside_parameter) { { capture(:key).value.to_sym => capture(:value).value } }
	end

	rule complex_command
		(everything_except_braces? lbrace spaces complex_command spaces rbrace)* everything_except_braces?
	end


	rule neuma_as_dotted_attributes_beginning_with_dot
		(dot neuma_as_dotted_attributes) { { kind: :neuma, neuma: [ nil ] + capture(:neuma_as_dotted_attributes).value[:neuma] } }
	end

	rule neuma_as_dotted_attributes
		 ((a:attribute (dot b:attribute?)*) | dot) { { kind: :neuma, neuma: (capture(:a) ? [ capture(:a).value ] : []) + captures(:b).collect { |c| c.value } } }
	end

	rule neuma_as_parenthesis_attributes
		(lpar spaces (attribute spaces)* rpar) { { kind: :neuma, neuma: captures(:attribute).collect { |c| c.value } } }
	end

	rule attribute
		everything_that_can_be_an_attribute
	end

	rule number
    	float | integer
  	end

  	rule symbol
  		(colon name) { { kind: :value, value: capture(:name).value.to_sym } }
  	end

  	rule string
  		(double_quote everything_except_double_quote double_quote) { { kind: :value, value: capture(:everything_except_double_quote).value } }
  	end

  	rule float
    	(digits dot digits space*) { { kind: :value, value: to_str.to_f } }
  	end

  	rule integer
    	(digits spaces) { { kind: :value, value: to_str.to_i } }
  	end

  	rule digits
    	[0-9]+ ('_' [0-9]+)*
  	end

	rule comment
		(lcomment complex_comment rcomment) | (hsh everything_until_eol)
	end

	rule complex_comment
		everything_except_comment? (lcomment complex_comment rcomment)* everything_except_comment?
	end

	rule everything_until_eol
		~/$/
	end

	rule everything_except_comment
		~/((\*\/)|(\/\*))/m
	end

	rule everything_except_braces
		~/({|})/m
	end

	rule everything_except_double_quote
		~/(\")/m
	end

	rule everything_that_can_be_an_attribute
		/[^({|}|\[|\]|.| |\t|\n|\r|#|@|&|,|\|)]+/m
	end

	rule name
		/[[:alpha:]]\w*/
	end

	rule double_quote '"' end
	rule dot '.' end
	rule comma ',' end
	rule colon ':' end
	rule double_colon '::' end
	rule bar '|' end
	rule double_bar '||' end
	rule lpar '(' end
	rule rpar ')' end
	rule lbrace '{' end
	rule rbrace '}' end
	rule lbracket '[' end
	rule rbracket ']' end
	rule at '@' end
	rule ampersand '&' end
	rule equal '=' end
	rule lcomment '/*' end
	rule rcomment '*/' end
	rule hsh '#' end

	rule space /[ \t\n\r]/m end
	rule spaces (space | comment)* end
end