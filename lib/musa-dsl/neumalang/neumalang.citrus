grammar Neumalang

	rule content
		sentences
	end

	rule sentences
		(spaces (sentence spaces)*) <Musa::Neumalang::Parser::Sentences>
	end

	rule sentence
		expression
	end

	rule expression
		variable_assign | call_methods_expression | object_expression | event
	end

	rule object_expression
		braced_command | reference_expression | bracketed_expression | use_variable | constant | neuma
	end

	rule reference_expression
		(ampersand spaces expression) <Musa::Neumalang::Parser::ReferenceExpression>
	end

	rule variable_assign
		((use_variable spaces equal spaces)+ expression) <Musa::Neumalang::Parser::VariableAssign>
	end

	rule event
		(double_colon name parameters?) <Musa::Neumalang::Parser::Event>
	end

	rule braced_command
		(lbrace spaces complex_command spaces rbrace parameters?) <Musa::Neumalang::Parser::BracedCommand>
	end

	rule call_methods_expression
		(object_expression (dot method_call)+) <Musa::Neumalang::Parser::CallMethodsExpression>
	end

	rule bracketed_expression
		bracketed_bar_sentences | bracketed_sentences
	end

	rule method_call
		(name parameters?) { { method: capture(:name).value.to_sym }.merge(capture(:parameters) ? capture(:parameters).value : {}) }
	end

	rule neuma
        appogiatura_neuma | simple_neuma
	end

	rule appogiatura_neuma
	    (lpar spaces a:simple_neuma spaces rpar spaces b:simple_neuma) { capture(:b).value.tap { |_| _[:neuma] << { appogiatura: capture(:a).value[:neuma] } } }
	end

	rule simple_neuma
		neuma_as_dotted_attributes_beginning_with_dot | neuma_as_dotted_attributes_beginning_with_simple_attribute | neuma_between_angles_attributes
	end

	rule constant
		number | symbol | string
	end

	rule bracketed_bar_sentences
		(lbracket spaces aa:sentences (bar spaces bb:sentences)+ rbracket) <Musa::Neumalang::Parser::BracketedBarSentences>
	end

	rule bracketed_sentences
		(lbracket spaces sentences rbracket) <Musa::Neumalang::Parser::BracketedSentences>
	end

	rule use_variable
		(at name) <Musa::Neumalang::Parser::UseVariable>
	end

	rule parameters
		parameters_a | parameters_b | parameters_c
	end

	rule parameters_a
		(lpar positional_parameters comma key_parameters rpar) { { value_parameters: capture(:positional_parameters).value, key_parameters: capture(:key_parameters).value } }
	end

	rule parameters_b
		(lpar key_parameters rpar) { { key_parameters: capture(:key_parameters).value } }
	end

	rule parameters_c
		(lpar positional_parameters rpar) { { value_parameters: capture(:positional_parameters).value } }
	end

	rule positional_parameters
		(spaces a:sentence (spaces comma spaces b:sentence spaces)* spaces) {
			[ capture(:a).value ] + captures(:b).collect { |c| c.value }
		}
	end

	rule key_parameters
		(spaces a:key_value_parameter (spaces comma spaces b:key_value_parameter spaces)* spaces) {

			result = capture(:a).value.clone

			captures(:b).each { |c| result.merge! c.value }

			result
		}
	end

	rule key_value_parameter
		(key:name colon spaces value:sentence) { { capture(:key).value.to_sym => capture(:value).value } }
	end

	rule complex_command
	    (everything_except_braces? lbrace spaces complex_command spaces rbrace)* everything_except_braces?
	end


	rule neuma_as_dotted_attributes_beginning_with_simple_attribute
	    (a:simple_attribute (dot b:attribute)*) <Musa::Neumalang::Parser::NeumaAsDottedAttributesBeginningWithSimpleAttribute>
	end

	rule neuma_as_dotted_attributes_beginning_with_dot
	    ((dot attribute)+ | dot) <Musa::Neumalang::Parser::NeumaAsDottedAttributesBeginningWithDot>
	end

	rule neuma_between_angles_attributes
		(langle spaces simple_attribute? spaces (attribute spaces)* rangle) <Musa::Neumalang::Parser::NeumaBetweenAnglesAttributes>
	end

    rule attribute
        (modifier_attribute | simple_attribute)
    end

	rule simple_attribute
		everything_that_can_be_an_attribute !colon
	end

	rule modifier_attribute
	    modifier_call_without_parameters | modifier_call_with_parameters
	end

	rule modifier_call_without_parameters
		(name &attribute_change) { { modifier: capture(:name).value.to_sym } }
	end

	rule modifier_call_with_parameters
		(name modifier_parameters) { { modifier: capture(:name).value.to_sym }.merge(capture(:modifier_parameters) ? capture(:modifier_parameters).value : {}) }
	end

    rule modifier_parameters
        (lpar modifier_positional_parameters rpar) { { parameters: capture(:modifier_positional_parameters).value } }
    end

	rule modifier_positional_parameters
		(spaces a:modifier_parameter_constant (spaces comma spaces b:modifier_parameter_constant spaces)* spaces) {
		    if capture(:b)
			    [ capture(:a).value ] + captures(:b).collect { |c| c.value }
            else
                capture(:a).value
            end
        }
	end

    rule modifier_parameter_constant
        raw_number | raw_symbol | raw_string
    end

	rule number
    	float | rational | integer
  	end

	rule raw_number
    	raw_float | raw_rational | raw_integer
  	end

  	rule symbol
  		(colon name) <Musa::Neumalang::Parser::Symbol>
  	end

  	rule raw_symbol
  		(name &spaces) { capture(:name).value.to_sym }
  	end

  	rule string
  		(double_quote everything_except_double_quote double_quote) <Musa::Neumalang::Parser::String>
  	end

  	rule raw_string
  		(double_quote everything_except_double_quote double_quote) { capture(:everything_except_double_quote).value }
  	end

  	rule float
    	(single_quote str:(digits dot digits) spaces) <Musa::Neumalang::Parser::Float>
  	end

  	rule raw_float
    	(str:(digits dot digits) spaces) { capture(:str).value.to_f }
  	end

  	rule integer
    	(single_quote digits spaces) <Musa::Neumalang::Parser::Integer>
  	end

  	rule raw_integer
    	(digits spaces) { capture(:digits).value.to_i }
  	end

  	rule rational
    	(single_quote str:(digits slash digits) spaces) <Musa::Neumalang::Parser::Rational>
  	end

  	rule raw_rational
    	(str: (digits slash digits) spaces) { capture(:str).value.to_r }
  	end

	rule comment
		(lcomment complex_comment rcomment) | hash_comment
	end

	rule hash_comment
	    (hsh_at_start_of_line | space+) everything_until_eol
	end

	rule complex_comment
		everything_except_comment? (lcomment complex_comment rcomment)* everything_except_comment?
	end

  	rule digits
    	[0-9]+ ('_' [0-9]+)*
  	end

	rule name
		/[[:alpha:]]\w*/
	end

	rule everything_that_can_be_an_attribute
		/[^({|}|\[|\]|\(|\)|\<|\>|.|,|:|=| |\t|\n|\r|\"|@|&|\|)]+/m
	end

    rule attribute_change
        space | dot | rbracket | rpar | rbrace | eol
    end

	rule everything_until_eol
		~/$/
	end

	rule everything_except_comment
		~/((\*\/)|(\/\*))/m
	end

	rule everything_except_braces
		~/({|})/m
	end

	rule everything_except_double_quote
		~/(\")/m
	end

	rule hsh_at_start_of_line
	    /\A#/
	end

	rule double_quote '"' end
	rule single_quote '\'' end
	rule dot '.' end
	rule comma ',' end
	rule colon ':' end
	rule double_colon '::' end
	rule bar '|' end
	rule slash '/' end
	rule lpar '(' end
	rule rpar ')' end
	rule lbrace '{' end
	rule rbrace '}' end
	rule lbracket '[' end
	rule rbracket ']' end
	rule langle '<' end
	rule rangle '>' end
	rule at '@' end
	rule ampersand '&' end
	rule equal '=' end
	rule lcomment '/*' end
	rule rcomment '*/' end
	rule hsh '#' end
	rule eol /$/ end

	rule space /[ \t\n\r]/m end
	rule spaces (space | comment)* end

end
