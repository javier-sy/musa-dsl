grammar Neuma

	rule content
		sentences
	end

	rule sentences
		(spaces (a:sentence spaces)*) { captures(:a).collect { |c| c.value } }
	end

	rule sentence
		 command | expression
	end



	rule command
		variable_assign | event | braced_command
	end

	rule expression
		serie_expression | neuma
	end



	rule variable_assign
		((use_variable spaces equal spaces)+ expression) { { assign_to: captures(:use_variable).collect { |c| c.value[:use_variable] }, value: capture(:expression).value } }
	end

	rule event
		(colon name parameters?) { { event: capture(:name).value.to_sym }.merge(capture(:parameters) ? { parameters: capture(:parameters).value } : {}) } 
	end

	rule braced_command
		(lbrace spaces complex_command spaces rbrace) { { command: capture(:complex_command).value.strip } }
	end











#	rule serie_expression
#		simple_expression_method | simple_expression
#	end


#	rule simple_expression_method
#		(simple_expression method_sequence) { capture(:simple_expression).value.merge({ call_method: capture(:method_sequence).value }) }
#	end

#	rule method_sequence
#		method_sequence_a | method_sequence_b
#	end

#	rule method_sequence_a
#		(dot name method_sequence) { { xx: { call_method: capture(:name).value }, call_method: capture(:method_sequence).value } }
#	end

#	rule method_sequence_b
#		(dot name) { { call_method: capture(:name).value } }
#	end






#	rule serie_expression
#		simple_expression  | serie_expression_dot_name
#	end

#	rule serie_expression_dot_name
#		serie_expression dot name
#	end




	rule serie_expression
		call_method_expression | simple_expression
	end

	rule call_method_expression
		(simple_expression (dot name)+) { capture(:simple_expression).value.merge({ call_method: captures(:name).collect { |c| c.value } }) }
	end

	rule simple_expression
		bracketed_2bar_sentences | bracketed_sentences | use_variable
	end



	rule neuma
		dotted_attributes_beginning_with_dot | dotted_attributes | parenthesis_attributes
	end



	rule bracketed_2bar_sentences
		(lbracket spaces aa:sentences (double_bar spaces bb:sentences)+ rbracket) { { parallel: [capture(:aa).value] + captures(:bb).collect { |c| c.value } } }
	end

	rule bracketed_sentences
		(lbracket spaces sentences rbracket) { { serie: capture(:sentences).value } }
	end

	rule use_variable
		(at name) { { use_variable: capture(:name).value.to_sym } }
	end



	rule parameters
		(lpar spaces a:expression spaces (comma spaces b:expression spaces)* rpar) { [ capture(:a).value ] + captures(:b).collect { |p| p.value } }
	end

	rule complex_command
		everything_except_braces? (spaces lbrace spaces complex_command spaces rbrace)* spaces everything_except_braces?
	end



	rule dotted_attributes_beginning_with_dot
		(dot dotted_attributes) { { neuma: [ nil ] + capture(:dotted_attributes).value[:neuma] } }
	end

	rule dotted_attributes
		 ((a:attribute (dot b:attribute?)*) | dot) { { neuma: (capture(:a) ? [ capture(:a).value ] : []) + captures(:b).collect { |c| c.value } } }
	end

	rule parenthesis_attributes
		(lpar spaces (a:attribute spaces)* rpar) { { neuma: captures(:a).collect { |c| c.value } } }
	end

	rule attribute
		everything_that_can_be_an_attribute
	end

	rule spaces
		(space | comment)*
	end

	rule space
		/[ \t\n\r]/m
	end

	rule comment
		(lcomment complex_comment rcomment) | (hsh everything_until_eol)
	end

	rule complex_comment
		everything_except_comment? (lcomment complex_comment rcomment)* everything_except_comment?
	end

	rule everything_until_eol
		~/$/
	end

	rule everything_except_comment
		~/((\*\/)|(\/\*))/m
	end

	rule everything_except_braces
		~/({|})/m
	end

	rule everything_that_can_be_an_attribute
		/[^({|}|\[|\]|.| |\t|\n|\r|#|@|,|\|)]+/m
	end

	rule name
		/[[:alpha:]]\w*/
	end

	rule dot '.' end
	rule comma ',' end
	rule colon ':' end
	rule bar '|' end
	rule double_bar '||' end
	rule lpar '(' end
	rule rpar ')' end
	rule lbrace '{' end
	rule rbrace '}' end
	rule lbracket '[' end
	rule rbracket ']' end
	rule at '@' end
	rule equal '=' end
	rule lcomment '/*' end
	rule rcomment '*/' end
	rule hsh '#' end
end