grammar Neuma
	rule line
		((a:neuma space)* comment?) { [ captures(:a).collect { |x| x.value } ] }
	end

	rule neuma
		(x:(dotted_attributes | parenthesis_attributes)) { capture(:x).value }
	end

	rule dotted_attributes
		(a:attribute ('.' b:attribute)*) { "dotted_attributes"+ capture(:a).class+ captures(:b).value }
	end

	rule parenthesis_attributes
		('(' a:attribute (space b:attribute)* ')') { "parenthesis_attributes"+ capture(:a).class+ captures(:b).value  }
	end

	rule command
		(element:(event | braced_command)) { capture(:element).value }
	end

	rule event
		(':' name) { capture(:name).value }
	end

	rule braced_command
		('{' space complex_command space '}') { capture(:complex_command).value }
	end

	rule complex_command
		(element:(everything_except_braces | '{' everything_except_braces '}')) { capture(:element).value }
	end

	rule everything_except_braces
		( [^({|})]+ ) { to_str }
	end

	rule attribute
		(everything_except_braces_dots_spaces_comment) { capture(:everything_except_braces_dots_spaces_comment).value } 
	end

	rule everything_except_braces_dots_spaces_comment
		([^({|}|.| |\t|\n|#)]+) { to_str.to_i }
	end

	rule name
		( /[[:alpha:]]\w*/ ) { to_str }
	end

	rule space
		[ \t\n]*
	end

	rule comment
		'#' .*
	end
end