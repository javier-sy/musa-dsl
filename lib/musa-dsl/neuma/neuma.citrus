grammar Neuma

	rule content
		neumas
	end

	rule neumas
		(spaces (a:neuma spaces)*) { captures(:a).collect { |c| c.value } }
	end

	rule neuma
		(expression | command | dotted_attributes_beginning_with_dot | dotted_attributes | parenthesis_attributes)
	end

	rule dotted_attributes_beginning_with_dot
		(dot dotted_attributes) { { attributes: [ nil ] + capture(:dotted_attributes).value[:attributes] } }
	end

	rule dotted_attributes
		 ((a:attribute (dot b:attribute?)*) | dot) { { attributes: (capture(:a) ? [ capture(:a).value ] : []) + captures(:b).collect { |c| c.value } } }
	end

	rule parenthesis_attributes
		(lpar spaces (a:attribute spaces)* rpar) { { attributes: captures(:a).collect { |c| c.value } } }
	end

	rule attribute
		everything_that_can_be_an_attribute
	end

	rule command
		event | braced_command
	end

	rule event
		(colon name parameters?) { { event: capture(:name).value.to_sym }.merge(capture(:parameters) ? { parameters: capture(:parameters).value } : {}) } 
	end

	rule parameters
		(lpar spaces a:expression spaces (comma spaces b:expression spaces)* rpar) { [ capture(:a).value ] + captures(:b).collect { |p| p.value } }
	end

	rule braced_command
		(lbrace spaces complex_command spaces rbrace) { { command: capture(:complex_command).value.strip } }
	end

	rule complex_command
		everything_except_braces? (spaces lbrace spaces complex_command spaces rbrace)* spaces everything_except_braces?
	end

	rule expression
		(bracketed_2bar_neumas | bracketed_neumas | variable_assign | variable)
	end

	rule bracketed_neumas
		(lbracket spaces neumas rbracket) { { neumas: capture(:neumas).value } }
	end

	rule bracketed_2bar_neumas
		(lbracket spaces aa:neumas (double_bar spaces bb:neumas)+ rbracket) { { parallel: [capture(:aa).value] + captures(:bb).collect { |c| c.value } } }
	end

	rule variable_assign
		(variable spaces equal spaces expression) { { assign_to: capture(:variable).value[:use_variable], value: capture(:expression).value } }
	end

	rule variable
		(at name) { { use_variable: capture(:name).value.to_sym } }
	end

	rule spaces
		(space | comment)*
	end

	rule space
		/[ \t\n\r]/m
	end

	rule comment
		(lcomment complex_comment rcomment) | (hsh everything_until_eol)
	end

	rule complex_comment
		everything_except_comment? (lcomment complex_comment rcomment)* everything_except_comment?
	end

	rule everything_until_eol
		~/$/
	end

	rule everything_except_comment
		~/((\*\/)|(\/\*))/m
	end

	rule everything_except_braces
		~/({|})/m
	end

	rule everything_that_can_be_an_attribute
		/[^({|}|\[|\]|.| |\t|\n|\r|#|@|,|\|)]+/m
	end

	rule name
		/[[:alpha:]]\w*/
	end

	rule dot '.' end
	rule comma ',' end
	rule colon ':' end
	rule bar '|' end
	rule double_bar '||' end
	rule lpar '(' end
	rule rpar ')' end
	rule lbrace '{' end
	rule rbrace '}' end
	rule lbracket '[' end
	rule rbracket ']' end
	rule at '@' end
	rule equal '=' end
	rule lcomment '/*' end
	rule rcomment '*/' end
	rule hsh '#' end
end