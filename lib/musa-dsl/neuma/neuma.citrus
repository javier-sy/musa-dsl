# TODO add event parameters
	
grammar Neuma

	rule lines
		((spaces ((line_content comment?) | comment | crlf ))*) { captures(:line_content).collect { |c| c.value }.flatten(1) }
	end

	rule line_content
		((neuma spaces)+) { captures(:neuma).collect { |c| c.value } }
	end

	rule neuma
		command | dotted_attributes_beginning_with_dot | dotted_attributes | parenthesis_attributes | bracketed_neumas
	end

	rule dotted_attributes_beginning_with_dot
		(dot dotted_attributes) { { attributes: [ nil ] + capture(:dotted_attributes).value[:attributes] } }
	end

	rule dotted_attributes
		 ((a:attribute (dot b:attribute?)*) | dot) { { attributes: (capture(:a) ? [ capture(:a).value ] : []) + captures(:b).collect { |c| c.value } } }
	end

	rule parenthesis_attributes
		(lpar spaces (a:attribute spaces)* rpar) { { attributes: captures(:a).collect { |c| c.value } } }
	end

	rule bracketed_neumas
		(lbracket spaces (a:neuma spaces)* rbracket) { { neumas: captures(:a).collect { |c| c.value } } }
	end

	rule attribute
		everything_except_braces_brackets_dots_spaces_comment
	end

	rule command
		event | braced_command
	end

	rule event
		(colon name) { { event: capture(:name).value.to_sym } } 
	end

	rule braced_command
		(lbrace spaces complex_command spaces rbrace) { { command: capture(:complex_command).value.strip } }
	end

	rule complex_command
		everything_except_braces? (spaces lbrace spaces complex_command spaces rbrace)* spaces everything_except_braces?
	end

	rule spaces
		space*
	end

	rule comment
		hsh ~/$/x
	end

	rule space
		[ \t]
	end

	rule everything_except_braces
		/[^({|})]+/
	end

	rule everything_except_braces_brackets_dots_spaces_comment
		/[^({|}|\[|\]|.| |\t|\n|\r\#)]+/
	end

	rule name
		/[[:alpha:]]\w*/
	end

	rule dot
		'.'
	end

	rule colon
		':'
	end

	rule lpar
		'('
	end

	rule rpar
		')'
	end

	rule lbrace
		'{'
	end

	rule rbrace
		'}'
	end

	rule lbracket
		'['
	end

	rule rbracket
		']'
	end

	rule hsh
		'#'
	end

	rule crlf
		[\n\r]
	end
end