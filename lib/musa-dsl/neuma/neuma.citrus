grammar Neuma
	
	rule line
		(content:(content_line | empty_line) eol?)* { captures(:content).collect { |c| c.value } }
	end

	rule content_line
		((neuma space*)* comment?) { captures(:neuma).collect { |c| c.value } + [ { comment: capture(:comment).value } ] }
	end

	rule empty_line
		(space*) { [] }
	end

	rule neuma
		command | dotted_attributes | parenthesis_attributes
	end

	rule dotted_attributes
		(dot | (a:attribute (dot b:attribute?)*)) { { attributes: (capture(:a) ? [ capture(:a).value ] : []) + captures(:b).collect { |c| c.value } } }
	end

	rule parenthesis_attributes
		(lpar space* (a:attribute space*)* rpar) { { attributes: captures(:a).collect { |c| c.value } } }
	end

	rule attribute
		everything_except_braces_dots_spaces_comment
	end

	rule command
		event | braced_command
	end

	rule event
		(colon name) { { event: capture(:name).value } } 
	end

	rule braced_command
		(lbrace space* complex_command space* rbrace) { { command: capture(:complex_command).value } }
	end

	rule complex_command
		everything_except_braces_eol? (space* lbrace space* complex_command space* rbrace)* space* everything_except_braces_eol?
	end

	rule comment
		(hsh everything_except_eol) { capture(:everything_except_eol).value }
	end

	rule everything_except_braces_eol
		/[^({|}|\n)]+/
	end

	rule everything_except_braces_dots_spaces_comment
		/[^({|}|.| |\t|\n|#)]+/
	end

	rule name
		/[[:alpha:]]\w*/
	end

	rule dot
		'.'
	end

	rule colon
		':'
	end

	rule lpar
		'('
	end

	rule rpar
		')'
	end

	rule lbrace
		'{'
	end

	rule rbrace
		'}'
	end

	rule space
		[ \t]
	end

	rule hsh
		'#'
	end

	rule everything_except_eol
		/[^\n]*/
	end

	rule eol
		'\n'
	end
end